version: '3'
x-postgres:
  &postgres-common
  image: "ankane/pgvector:v0.5.1"
  user: postgres
  healthcheck:
    test: "exit 0"
    interval: 2s
    timeout: 12s
    retries: 3


name: omnivore

services:
  traefik:
    image: traefik:v3.2
    container_name: traefik
    command:
    - "--log.level=ERROR"
    - "--api.insecure=true"
    - "--providers.docker=true"
    - "--providers.docker.exposedbydefault=false"
    - "--entryPoints.web.address=:80"
    - "--entryPoints.websecure.address=:443"
    - "--entrypoints.websecure.http.tls=true"
    - "--metrics.prometheus=true"
    - "--accesslog=true"
    - "--accesslog.addinternals"
    ports:
    - "80:80"
    - "443:443"
    - "8088:8080"
    volumes:
    - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.traefik.entrypoints=websecure"
    - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  postgres:
    <<: *postgres-common
    container_name: "omnivore-postgres"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env
    restart: unless-stopped

  # migrate:
  #   image: m1xxos/omnivore-migrate
  #   container_name: "omnivore-migrate"
  #   command: '/bin/sh ./packages/db/setup.sh' # Also create a demo user with email: demo@omnivore.app, password: demo_password
  #   env_file:
  #     - .env
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  api:
    # image: ghcr.io/m1xxos/omnivore-api:sha-76421b9
    image: m1xxos/omnivore-api
    container_name: "omnivore-api"
    ports:
      - "4000:8080"
    healthcheck:
      test: ["CMD-SHELL", "nc -z 0.0.0.0 8080 || exit 1"]
      interval: 15s
      timeout: 90s
      retries: 6
    env_file:
      - .env
    restart: unless-stopped
    # depends_on:
    #   migrate:
    #     condition: service_completed_successfully

  queue-processor:
    image: m1xxos/omnivore-queue-processor
    container_name: "omnivore-queue-processor"
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      api:
        condition: service_started

  web:
    image: m1xxos/omnivore-web
    container_name: "omnivore-web"
    ports:
      - "3000:8080"
    env_file:
      .env
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.web.entrypoints=web"
    - "traefik.http.routers.web.rule=Host(`omnivore.m1xxos.local`)"
    - "traefik.http.services.web.loadbalancer.server.port=3000"
    - "traefik.http.middlewares.testHeader.headers.customrequestheaders.Host=localhost"
    - "traefik.http.routers.web.middlewares=testHeader@docker"

    
  image-proxy:
    image: m1xxos/omnivore-image-proxy
    container_name: "omnivore-image-proxy"
    ports:
      - "7070:8080"
    env_file:
      - .env
    restart: unless-stopped

  content-fetch:
    # image: ghcr.io/m1xxos/omnivore-content-fetch:sha-5f0327a
    image: m1xxos/omnivore-content-fetch
    container_name: "omnivore-content-fetch"
    ports:
      - "9090:8080"
    environment:
      - USE_FIREFOX=true # Using Firefox here because the official chrome version seems to freeze a lot in Docker.
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy

  redis:
    image: "redis:7.2.4"
    container_name: "omnivore-redis"
    expose:
      - 6379
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    volumes:
      - redis_data:/data
    restart: unless-stopped

  minio:
    image: minio/minio
    expose:
      - 1010
    ports:
      - "1010:9000"
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 1s
    environment:
      - "MINIO_ACCESS_KEY=minio"
      - "MINIO_SECRET_KEY=miniominio"
      - "AWS_S3_ENDPOINT_URL=http://minio:1010"
    command: server /data
    volumes:
      - minio_data:/data
    restart: unless-stopped

  createbuckets:
    image: minio/mc
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=miniominio
      - BUCKET_NAME=omnivore
      - ENDPOINT=http://minio:9000
      - AWS_S3_ENDPOINT_URL=http://minio:9000
    depends_on:
      - minio
    entrypoint: >
      /bin/bash -c "
      sleep 5;
      until (/usr/bin/mc config host add myminio http://minio:9000 minio miniominio) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb myminio/omnivore;
      /usr/bin/mc policy set public myminio/omnivore;
      exit 0;
      "

  mail-watch-server:
    image: m1xxos/omnivore-mail-watch-server
    container_name: "omnivore-mail-watch-server"
    ports:
      - "4398:8080"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  pgdata:
    external: true
    name: docker-compose_pgdata
  redis_data:
    external: true
    name: docker-compose_redis_data
  minio_data:
    external: true
    name: docker-compose_minio_data

